// File: fpga_synth.v
// Generated by MyHDL 0.7
// Date: Tue May 14 22:37:36 2013


`timescale 1ns/10ps

module fpga_synth (
    clk,
    param_data,
    param_clk,
    audio_req,
    audio_ack,
    dac_bit
);


input clk;
input [3:0] param_data;
input param_clk;
output audio_req;
wire audio_req;
input audio_ack;
output dac_bit;
reg dac_bit;

reg audio_tick;
reg [23:0] param_counter;
reg [13:0] _output;
reg [15:0] audio_counter;
reg areq_bit;
reg param_tick;
wire [13:0] dsig_interp_result;
reg [17:0] dsig_vc_estimate;
reg [35:0] dsig_sum_of_products;
reg [22:0] dsig__interp_interp_step;
reg dsig__interp_direction;
reg [22:0] dsig__interp_interp_data;
reg [4:0] dsig__interp_rm_counter;
reg [13:0] dsig__interp_delay_1;
reg dsig__interp_rm_tick;





always @(posedge clk) begin: FPGA_SYNTH_AUDIO_SAMPLE_RATE
    if ((audio_counter >= (800 - 1))) begin
        audio_counter <= 0;
        audio_tick <= 1'b1;
    end
    else begin
        audio_counter <= (audio_counter + 1);
        audio_tick <= 1'b0;
    end
end


always @(posedge clk) begin: FPGA_SYNTH_PARAM_SAMPLE_RATE
    if ((param_counter >= (32000 - 1))) begin
        param_counter <= 0;
        param_tick <= 1'b1;
    end
    else begin
        param_counter <= (param_counter + 1);
        param_tick <= 1'b0;
    end
end


always @(posedge param_tick) begin: FPGA_SYNTH_BIG_DUMB_SQUARE_WAVE
    areq_bit <= (!areq_bit);
    if (areq_bit) begin
        areq_bit <= 1'b0;
        _output <= 0;
    end
    else begin
        areq_bit <= 1'b1;
        _output <= 16383;
    end
end



assign audio_req = areq_bit;


always @(posedge clk) begin: FPGA_SYNTH_DSIG__INTERP_DO_STUFF
    if (((dsig__interp_rm_counter == 0) || (dsig__interp_rm_counter == 3) || (dsig__interp_rm_counter == 6) || (dsig__interp_rm_counter == 9) || (dsig__interp_rm_counter == 11) || (dsig__interp_rm_counter == 14) || (dsig__interp_rm_counter == 17) || (dsig__interp_rm_counter == 20) || (dsig__interp_rm_counter == 23))) begin
        dsig__interp_rm_tick <= 1'b0;
    end
    else begin
        dsig__interp_rm_tick <= 1'b1;
    end
    if ((dsig__interp_rm_counter >= 24)) begin
        dsig__interp_rm_counter <= 0;
    end
    else begin
        dsig__interp_rm_counter <= (dsig__interp_rm_counter + 1);
    end
    if (audio_tick) begin
        dsig__interp_delay_1 <= _output;
        dsig__interp_interp_data <= (dsig__interp_delay_1 << 9);
        if ((_output > dsig__interp_delay_1)) begin
            dsig__interp_direction <= 1'b1;
            dsig__interp_interp_step <= (_output - dsig__interp_delay_1);
        end
        else begin
            dsig__interp_direction <= 1'b0;
            dsig__interp_interp_step <= (dsig__interp_delay_1 - _output);
        end
    end
    else if (dsig__interp_rm_tick) begin
        if (dsig__interp_direction) begin
            dsig__interp_interp_data <= (dsig__interp_interp_data + dsig__interp_interp_step);
        end
        else begin
            dsig__interp_interp_data <= (dsig__interp_interp_data - dsig__interp_interp_step);
        end
    end
end



assign dsig_interp_result = (dsig__interp_interp_data >>> 9);


always @(posedge clk) begin: FPGA_SYNTH_DSIG_DO_STUFF
    dac_bit <= (dsig_interp_result > (dsig_sum_of_products >>> 18));
    dsig_vc_estimate <= (dsig_sum_of_products >>> 18);
end


always @(dac_bit, dsig_vc_estimate) begin: FPGA_SYNTH_DSIG_MULTIPLY
    if (dac_bit) begin
        dsig_sum_of_products = ((818 << 14) + (261326 * dsig_vc_estimate));
    end
    else begin
        dsig_sum_of_products = (261326 * dsig_vc_estimate);
    end
end

endmodule
